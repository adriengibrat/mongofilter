<<<<<<< HEAD
/*https://github.com/malko/mongofilter brought to you under MIT licence by Jonathan Gotti version: 1.0.3*/
define("mongofilter",["exports","module"],function(n,t){"use strict";function e(n,t,e,r){var i=[];return Array.isArray(t)?t.forEach(function(t,e){return i.push(new u(t,e,r).filterItem(n))}):Object.keys(t).forEach(function(e){return i.push(new u(t[e],e,r).filterItem(n))}),i="OR"===e?!!~i.indexOf(!0):"NOR"===e?!~i.indexOf(!0):!~i.indexOf(!1)}function r(n,t,e){var r=!0;return r=(typeof t).match(/string|number|boolean/)?l["="](n[e],t):t instanceof Array?l.IN(n[e],t):new u(t,"AND",e).filterItem(n)}function i(n,t,i,u){return i in l?l[i](n[u],t):"AND"===i||"NOR"===i||"OR"===i?e(n,t,i,u):r(n,t,i)}function u(n){var t=void 0===arguments[1]?"AND":arguments[1],e=void 0===arguments[2]?null:arguments[2];N[t]&&(t=N[t]),this.filterItem=function(r){if("string"==typeof r)try{r=JSON.parse(r)}catch(u){return!1}return i(r,n,t,e)}}function o(n){if("string"==typeof n&&(n=JSON.parse(n)),!n)throw"Invalid clause";var t=new u(n),e=function(n){return t.filterItem(n)};return e.filter=t.filterCollection,e.filterItem=t.filterItem,e}t.exports=o;var f=/(^|[^%])%(?!%)/g,c=/(^|[^\\])(_+)/g,a=function(n,t,e){return t+new Array(e.length+1).join(".")},l={">":function(n,t){return n>t},">=":function(n,t){return n>=t},"<":function(n,t){return t>n},"<=":function(n,t){return t>=n},"=":function(n,t){return n===t},"!=":function(n,t){return n!==t},REGEX:function(n,t){return void 0===n?!1:("string"==typeof t&&!function(){var n=void 0,e=void 0;t.replace(/^\/([\s\S]*)\/([igm])?/,function(t,r,i){e=r,n=i}),e||(e=t),t=n?new RegExp(e,n):new RegExp(e)}(),!!n.match(t))},LIKE:function(n,t){var e=new RegExp("^"+t.replace(f,"$1.*").replace(c,a)+"$");return!(!n&&0!==n||!n.toString().match(e))},UNLIKE:function(n,t){return!l.LIKE(n,t)},IN:function(n,t){return!!~t.indexOf(n)},NOTIN:function(n,t){return!~t.indexOf(n)}},N={$gt:">",$gte:">=",$lt:"<",$lte:"<=",$or:"OR","||":"OR",$nor:"NOR",$and:"AND","&&":"AND",$e:"=",$eq:"=","<>":"!=",$ne:"!=","!e":"!=",$in:"IN","!in":"NOTIN",$nin:"NOTIN","NOT IN":"NOTIN",$regex:"REGEX",$like:"LIKE",$nlike:"UNLIKE","!like":"UNLIKE","NOT LIKE":"UNLIKE"};u.prototype.filterCollection=function(n){return n?n.filter(this.filterItem):[]},o.comparators=l});
||||||| merged common ancestors
/*https://github.com/malko/mongofilter brought to you under MIT licence by Jonathan Gotti version: 1.0.1*/
define(["exports","module"],function(n,t){"use strict";function e(n,t,e,r){var i=[];return Array.isArray(t)?t.forEach(function(t,e){return i.push(new u(t,e,r).filterItem(n))}):Object.keys(t).forEach(function(e){return i.push(new u(t[e],e,r).filterItem(n))}),i="OR"===e?!!~i.indexOf(!0):"NOR"===e?!~i.indexOf(!0):!~i.indexOf(!1)}function r(n,t,e){var r=!0;return r=(typeof t).match(/string|number|boolean/)?l["="](n[e],t):t instanceof Array?l.IN(n[e],t):new u(t,"AND",e).filterItem(n)}function i(n,t,i,u){return i in l?l[i](n[u],t):"AND"===i||"NOR"===i||"OR"===i?e(n,t,i,u):r(n,t,i)}function u(n){var t=void 0===arguments[1]?"AND":arguments[1],e=void 0===arguments[2]?null:arguments[2];N[t]&&(t=N[t]),this.filterItem=function(r){if("string"==typeof r)try{r=JSON.parse(r)}catch(u){return!1}return i(r,n,t,e)}}function o(n){if("string"==typeof n&&(n=JSON.parse(n)),!n)throw"Invalid clause";var t=new u(n),e=function(n){return t.filterItem(n)};return e.filter=t.filterCollection,e.filterItem=t.filterItem,e}t.exports=o;var f=/(^|[^%])%(?!%)/g,c=/(^|[^\\])(_+)/g,a=function(n,t,e){return t+new Array(e.length+1).join(".")},l={">":function(n,t){return n>t},">=":function(n,t){return n>=t},"<":function(n,t){return t>n},"<=":function(n,t){return t>=n},"=":function(n,t){return n===t},"!=":function(n,t){return n!==t},REGEX:function(n,t){return"string"==typeof t&&!function(){var n=void 0,e=void 0;t.replace(/^\/([\s\S]*)\/([igm])?/,function(t,r,i){e=r,n=i}),e||(e=t),t=n?new RegExp(e,n):new RegExp(e)}(),!!n.match(t)},LIKE:function(n,t){var e=new RegExp("^"+t.replace(f,"$1.*").replace(c,a)+"$");return!(!n&&0!==n||!n.toString().match(e))},UNLIKE:function(n,t){return!l.LIKE(n,t)},IN:function(n,t){return!!~t.indexOf(n)},NOTIN:function(n,t){return!~t.indexOf(n)}},N={$gt:">",$gte:">=",$lt:"<",$lte:"<=",$or:"OR","||":"OR",$nor:"NOR",$and:"AND","&&":"AND",$e:"=",$eq:"=","<>":"!=",$ne:"!=","!e":"!=",$in:"IN","!in":"NOTIN",$nin:"NOTIN","NOT IN":"NOTIN",$regex:"REGEX",$like:"LIKE",$nlike:"UNLIKE","!like":"UNLIKE","NOT LIKE":"UNLIKE"};u.prototype.filterCollection=function(n){return n?n.filter(this.filterItem):[]},o.comparators=l});
=======
/*https://github.com/malko/mongofilter brought to you under MIT licence by Jonathan Gotti version: 1.0.1*/
define(["exports","module"],function(n,r){"use strict";function e(n,r,e,t){var i=Array.isArray(r)?r[y[e]](function(r,e){return u(r,e,t)(n)}):Object.keys(r)[y[e]](function(e){return u(r[e],e,t)(n)});return"$nor"===e?!i:i}function t(n,r,e){return g(r)?p.$eq(n[e],r):Array.isArray(r)?p.$in(n[e],r):u(r,"$and",e)(n)}function u(n,r,u){var i=void 0===arguments[1]?"$and":arguments[1];return function(r){if("string"==typeof r)try{r=JSON.parse(r)}catch(o){return!1}return i=d[i]||i,i in y?e(r,n,i,u):i in p?p[i](r[u],n):t(r,n,i)}}function i(n){if("string"==typeof n&&(n=JSON.parse(n)),!n||g(n))throw new TypeError("Invalid query");var r=u(n);return r.filter=function(n){return n&&n.filter?n.filter(r):[]},r}r.exports=i;var o=/(^|[^%])%(?!%)/g,f=/(^|[^\\])(_+)/g,c=function(n,r,e){return r+new Array(e.length+1).join(".")},a=function(n){return new RegExp("^"+n.replace(o,"$1.*").replace(f,c)+"$")},$=/^\/([\s\S]*)\/([igm]*)$/,s=function(n){return"string"==typeof n&&!function(){var r=void 0;n.replace($,function(e,t,u){n=t,r=u}),n=r?new RegExp(n,r):new RegExp(n)}(),n},l=/^(string|number|boolean)$/,g=function(n){return null==n||l.test(typeof n)},p={$gt:function(n,r){return n>r},$gte:function(n,r){return n>=r},$lt:function(n,r){return r>n},$lte:function(n,r){return r>=n},$eq:function(n,r){return n===r},$neq:function(n,r){return n!==r},$regex:function(n,r){return s(r).test(n)},$like:function(n,r){return a(r).test(n)},$nlike:function(n,r){return!a(r).test(n)},$in:function(n,r){return!!~r.indexOf(n)},$nin:function(n,r){return!~r.indexOf(n)}},y={$or:"some",$nor:"some",$and:"every"},d={$e:"$eq",$ne:"$neq"};i.alias=d,i.comparators=p});
>>>>>>> only keep mongo notation for comparators & logical operators + various improvements
